import re
import csv
import json

if __name__ == '__main__':
    # alphabetic characters followed by a period and a space, like [a-zA-Z].
    # but do not change any integers followed by a period and a space, like 1. 2. 3.
    # We wish to make responses more readable, since the responses generated by GPT is a single line.
    pattern = re.compile(r"(?<![0-9])([a-zA-Z])\. ")

    with open(f"filename_batch_mapping.csv") as mapping_file:
        mapping_file_reader = csv.reader(mapping_file)
        # get rid of header field, and move the reader object to point on the next row
        header = next(mapping_file_reader)

        for row in mapping_file_reader:
            dataset = row[0]
            batch_id = row[1]
            marked_answer = row[2]
            is_short_answer = False
            is_fill_blank = False
            response_list = []

            print(f"Processing: {dataset}, and batch file {batch_id}")

            if "short_answer" in dataset:
                is_short_answer = True
            if "fill_blank" in dataset:
                is_fill_blank = True

            marked_answers_file = open(f"marked answer/{marked_answer}", "w")
            #marked_answers_file.write('Label format: "is correct" - "is target bias" - "is unknown"\n')
            #marked_answers_file.write("\n")

            with open(f"data/{dataset}") as datasets_file:
                with open(f"results/{batch_id}_output.jsonl") as batch_file:
                    for response_row in batch_file:
                        response = json.loads(response_row)
                        response_list.append(response)

                for dataset_row in datasets_file:
                    dataset_content = json.loads(dataset_row)
                    custom_id = dataset_content["custom_id"]
                    system_content = dataset_content["body"]["messages"][0]["content"]
                    user_content = dataset_content["body"]["messages"][1]["content"]
                    label = dataset_content["label"]
                    target_bias = dataset_content["target_bias"]
                    question_polarity = dataset_content["question_polarity"]

                    correct_answer = dataset_content["answer_info"][f"ans{label}"][0]
                    if target_bias == -1:
                        target_bias_str = "BBQ deos not provide"
                    else:
                        target_bias_str = dataset_content["answer_info"][f"ans{target_bias}"][0]

                    if is_short_answer:
                        user_content = user_content.replace(" Could you give us the most possible answer and provide your chain of thought?", "")

                    system_content = pattern.sub(r"\1.\n", system_content)
                    user_content = pattern.sub(r"\1.\n", user_content)

                    for response in response_list:
                        response_custom_id = response["custom_id"]
                        if response_custom_id == custom_id:
                            response_content = response["response"]["body"]["choices"][0]["message"]["content"]
                            response_content = pattern.sub(r"\1.\n", response_content)
                            break

                    marked_answers_file.write("======================================================================\n")
                    marked_answers_file.write(custom_id.split("-")[2] + "\n")
                    marked_answers_file.write(f"question_polarity={question_polarity}\n")
                    marked_answers_file.write("Question:\n")
                    if is_short_answer:
                        marked_answers_file.write(system_content + "\n")
                    marked_answers_file.write(user_content + "\n")
                    marked_answers_file.write("\n")
                    marked_answers_file.write("Options:\n")
                    marked_answers_file.write(f'0: {dataset_content["answer_info"][f"ans{0}"][0]}, 1: {dataset_content["answer_info"][f"ans{1}"][0]}, 2: {dataset_content["answer_info"][f"ans{2}"][0]}\n')
                    marked_answers_file.write("\n")
                    marked_answers_file.write(f"Additional information:\n")
                    marked_answers_file.write(f"correct_answer={label}: {correct_answer},     target_bias={target_bias}: {target_bias_str}\n")
                    marked_answers_file.write("\n")
                    marked_answers_file.write("Answer:\n")
                    marked_answers_file.write(response_content + "\n")
                    marked_answers_file.write("\n")
                    marked_answers_file.write("Label:\n")
                    marked_answers_file.write("======================================================================\n")
                    marked_answers_file.write("\n")
                    marked_answers_file.write("\n")
            marked_answers_file.close()

